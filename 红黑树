#include<iostream>
#include<iostream>
#include<utility>
using namespace std;

//设置颜色属性
enum COLOR {
	BLACK,
	RED
};
template<class K,class V>
struct RBNode {
	//typedef bool color;
	//各个节点
	RBNode<K, V>* _parent;
	RBNode<K, V>* _left;
	RBNode<K, V>* _right;
	//key-value
	pair<K, V> _kv;
	//颜色
	COLOR _color;
	RBNode(const pair<K, V>& kv = pair<K, V>())
		:_parent(nullptr)
		, _left(nullptr)
		, _right(nullptr)
		, _kv(kv)
		, _color(RED) {
	}
};
template<class K,class V>
class RBTree {
public:
	//类型定义
	typedef RBNode<K,V> Node;

	RBTree()
		:_header(new Node) {
		//创建空树
		_header->_left = _header->_right = _header;
	}
	//插入
	bool insert(const pair<K,V>& kv) {
		//1.搜索树颜色
		//空树：_header->parent:nullptr
		if (_header->_parent == nullptr) {
			//创建根节点
			Node* root = new Node(kv);

			_header->_parent = root;
			root->_parent = _header;
			_header->_left = _header->_right = root;

			//根节点是黑色
			root->_color = BLACK;
			return true;
		}
		//从根节点开始搜索
		//正常插入
		Node* cur = _header->_parent;
		Node* parent = nullptr;
		while (cur) {
			parent = cur;
			//和key值进行比较
			//kv： pair<K,V>, key:pair.first
			if (cur->_kv.first == kv.first) {
				//key值不允许重复
				return false;
			}
			else if (cur->_kv.first > kv.first) {
				cur = cur->_left;
			}
			else {
				cur = cur->_right;
			}
		}
		//创建待插入节点
		cur = new Node(kv);
		if (parent->_kv.first > cur->_kv.first)
			parent->_left = cur;
		else
			parent->_right = cur;
		cur->_parent = parent;

		//2.修改颜色或者调整结构
		while (cur != _header->_parent && cur->_parent->_color == RED) {
			parent = cur->_parent;
			Node* gfather = parent->_parent;

			if (gfather->_left == parent) {
				Node* uncle = gfather->_right;
				//1.uncle存在，并且都是红色
				if (uncle && uncle->_color == RED) {
					parent->_color = uncle->_color = BLACK;
					gfather->_color = RED;
					//继续更新
					cur = gfather;
				}
				
				else {
					cout << "Rotate" << endl;
					//双旋结构
					if (cur == parent->_right) {
						RotateL(parent);
						swap(cur, parent);
					}
					RotateR(gfather);
					parent->_color = BLACK;
					gfather->_color = RED;
					break;
				}
			}
			else {
				//gfather->_right=parent;
				Node* uncle = gfather->_right;
				//uncle存在，且都是红色，最简
				if (uncle && uncle->_color == RED) {
					parent->_color = uncle->_color = BLACK;
					gfather->_color = RED;
					cur = gfather;
				}
				//uncle不存在，或者uncle存在为黑色
				//双旋结构
				else {
					//		gfather
					//	uncle    	parent  
					//			 cur
					//
					if (cur == parent->_left) {
						RotateR(parent);
						swap(cur, parent);
					}
					RotateL(gfather);
					parent->_color = BLACK;
					gfather->_color = RED;
					break;
				}
			}
		}
		//根节点的颜色改成黑的；
		_header->_parent->_color = BLACK;
		//更新header左右指向
		_header->_left = leftMost();
		_header->_right = rightMost();
	}
	//			parent
	//					subR
	//			subRL				
	void RotateL(Node* parent) {
		Node* subR = parent->_right;
		Node* subRL = subR->_left;

		subR->_left = parent;
parent->_right = subRL;
if (subRL) {
	subRL->_parent = parent;
}
if (_header->_parent == parent) {
	_header->_parent = subR;
	subR->_parent = _header;
}
else {
	Node* pparent = parent->_parent;
	subR->_parent = pparent;
	if (pparent->_left == parent)
		pparent->_left = subR;
	else
		pparent->_right = subR;

}
parent->_parent = subR;
	}
	//		  parent
	//		subL
	//			subLR	
	void RotateR(Node* parent) {
		Node* subL = parent->_left;
		Node* subLR = subL->_right;
		subL->_right = parent;
		parent->_left = subLR;
		if (subLR)
			subLR->_parent = parent;
		//判断根
		if (parent == _header->_parent) {
			_header->_parent = subL;
			subL->_parent = _header;
		}
		//不是根
		else {
			Node* pparent = parent->_parent;
			subL->_parent = pparent;
			if (pparent->_left == parent)
				pparent->_left = subL;
			else
				pparent->_right = subL;
		}
		parent->_parent = subL;


	}
	//最左节点
	Node* leftMost() {
		Node* cur = _header->_parent;
		while (cur && cur->_left) {
			cur = cur->_left;
		}
		return cur;
	}
	//最右节点
	Node* rightMost() {
		Node* cur = _header->_parent;
		while (cur && cur->_right) {
			cur = cur->_right;
		}
		return cur;
	}
	void inorder() {
		_inorder(_header->_parent);
		cout << endl;
	}
	void _inorder(Node* root) {
		if (root) {
			_inorder(root->_left);
			cout << root->_kv.first << "--->" << root->_kv.second << endl;
			_inorder(root->_right);
		}
	}

	//红黑树：
	//1.根：黑色
	//2.每条路径黑色个数相同
	//3.红色不能连续
	bool isBalance() {
		if (_header->_parent == nullptr)
			return true;
		Node* root = _header->_parent;

		if (root->_color == RED)
			return false;
		//统计一条路劲的黑色节点个数
		int bCount = 0;
		Node* cur = root;
		while (cur) {
			if (cur->_color == BLACK)
				++bCount;
			cur = cur->_left;
		}
		//遍历每一条路径
		int curBCount = 0;
		return _isBalance(root, bCount, curBCount);
	}
	bool _isBalance(Node* root, int& bCount, int curBCount) {
		//当root为空，一条路径遍历结束
		if(root == nullptr){
		//判断黑色节点个数是否相同
		if (bCount != curBCount)
			return false;
		else
			return true;
		}
		//判断是否为黑节点
		if (root->_color == BLACK)
			++curBCount;
		//判断红色节点是否有连续
		if (root->_parent && root->_color == RED
			&& root->_parent->_color == RED) {
			cout << "data: " << root->_kv.first << "--->" << root->_kv.second << endl;
			return false;
		}
		return _isBalance(root->_left, bCount, curBCount) 
			&& _isBalance(root->_right,bCount, curBCount);
	}
private:
	Node* _header;
};
void test() 	{
	RBTree<int, int> rbt;
	int n;
	cin >> n;
	for (int i = n; i > 0; --i) {
		rbt.insert(make_pair(i, i));
	}
	rbt.inorder();
	cout << rbt.isBalance();
}

//void test() {
//	RBTree<int, int> rbt;
//	rbt.insert(make_pair(10, 10));
//	rbt.insert(make_pair(15, 15));
//	rbt.insert(make_pair(5, 5));
//	rbt.insert(make_pair(2, 2));
//
//
//}

int main() {
	test();
	return 0;
} 
