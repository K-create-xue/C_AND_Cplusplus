#include<iostream>
using namespace std;

template<class T>
class AVLNode {
	AVLNode<T>* _parent;
	AVLNode<T>* _left;
	AVLNode<T>* _right;
	T _val;
	int _bf;

	AVLNode(const T& val = T())
		:_parent(nullptr)
		, _left(nullptr)
		, _right(nullptr)
		, _val(val)
		, _bf(0) {
	}

};
template<class T>
class AVLTree {
public:
	typedef AVLNode<T> Node;

	 
	cur->_parent = parent;

	while (parent) {
		if (parent->_left == cur)
			--parent->_bf;
		else
			++parent->b_f;
		if (parent->_bf == 0)  //parent比较短的子树高度+1
			//更新结束
			breake;
		else if (parent->_bf == 1 || )

		{


		}
	}
};

void test() {
	srand(time(nullptr));
	cout << "num:" << endl;
	int num;
	cin >> num;
	AVLTree<int> avl;
	for (int i = 0; i < num; ++i) {
		avl.insert(rand());
	}
	avl.inorder();


	if (parent->_bf == -2 && cur->_bf == 1) {
		
		Node* subLR = cur->_right;
		int bf = subLR->_bf;

		RotateL(cur);
		RotateR(parent);

		if (bf == 1) {
			parent->_bf = 0;
			cur->_bf = -1;
		}
		else if (bf == -1) {
			parent->_bf = 1;
			cur->_bf = 0;
		}
	}
}
int Height(pNode* root) {
	if (root == nullptr)
		return 0;
	int left = Height(root->left);
	int right = Height(root->right);
	return left > right ? left+1: right+1;
}
void RotateR


//subL->right = parent;
//parent->left = subLR;
//subLR->parent = parent;
//subL->parent = pprent;
//pprent->left = subL;
//
//
//
//
//parent    subR   subRL
//subR->left = parent;
//parent->right = subRL;
//subRL->parent = parent;
//pparent->left / right = subR;
//subR->parent = pparent;
//parent->parent = subR;
//parent->_bf = subR->_bf = 0;
//
//
//subR->left = parent;
//parent->right = subRL;
//subRL->parent = parent;
//parent->parent = subR;
//subR->parent = pparent;
//pparent->right/left = subR;
//parent->_bf = 0;

//hanoi


//#include<iostream>
//#include<stdio.h>
//using namespace std;
// int index = 0;
//void move(char a,char b,char c,size_t n) {
//	if (n == 1) {
//		cout << a << "-->" << c << endl;
//		index++;
//	}
//	else {
//		//cout << a << "-->" << b << endl;
//		move(a, c, b, n - 1);
//		cout<<a<<"-->"<<c<<endl;
//		index++;
//		move(b,a,c,n-1);
//	}
//}
//int main() {
//	int i = 4;
//	
//	char a = 'a', b = 'b', c = 'c';
//	move(a,b,c,i);
//	cout << index << endl;
//	return 0;
//}
//
//
//
//int main() {
//	void hanoi(int n, char one, char two, char three);   //声明hanoi函数
//	int m;
//	printf("input the number of diskes:\n");
//	scanf("%d", &m);                                     //收入要移动盘的数目
//	printf("The step of move %d diskes\n", m);
//	hanoi(m, 'A', 'B', 'C');                             //赋值给hanoi函数
//	system("pause");
//}
//void hanoi(int n, char one, char two, char three)        //定义hanoi函数
//{
//
//	void move(char x, char y);                           //声明move函数
//	if (n == 1)                                          //递归函数的最后值
//		move(one, three);                                //赋值给move函数
//	else
//		//开始递归
//	{
//		hanoi(n - 1, one, three, two);                    //赋值给hanoi函数
//		move(one, three);                                 //赋值给move函数
//		hanoi(n - 1, two, one, three);                    //赋值给hanoi函数
//	//这个函数的意思可以看做是：从上往下一共m个盘，
//	//将m-1个盘全部挪到two上，然后把m盘挪到three上，
//	//然后再将two上的所有盘挪到three上，就实现了。
//	//要挪m-1个盘在two上，必须把m-2个盘挪到three上，依次类推，层层递归。
//	}
//	//递归结束
//}
//void move(char x, char y)                                //定义move函数
//{
//	printf("%c-->%c\n", x, y);                           //输出每一步的指向
//}
