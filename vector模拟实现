
				size_t n = _endOfStorage == nullptr ? 1 : 2 * capacity();				
				reserve(n);
				//更新迭代器
				pos = _start + sz;
			}
			//移动元素
			iterator end_u = _finish;
			while (end_u != pos)
			{
				*end = *(end_u - 1);
				--end_u();
			}
			//插入元素
			*pos = val;
			//更新位置
			++_finish;
		}
	}
	iterator erase(iterator pos)
	{
		//检查位置
		if (pos < _finish && pos >= _start)
		{
			//移动元素
			iterator start = pos + 1;
			while (start!=_finish)
			{
				*(start - 1) = *start;
				start++;
			}
			//更新
			--_finish;
		}
		return pos;
	}

	T& operator[](size_t pos)
	{
		if (pos >= 0 && pos < size())
			return _start[pos];
	}
	Vector<T>& operator=(const Vector<T>& v)
	{
		if (this != &v)
		{
			delete[]_start;
			size_t n = v.capacity();
			_start = new T[n];
			for (size_t i = 0; i < v.capacity(); ++i)
			{
				_start[i] = v._start[i];
			}
			_finish = _start + v.size();
			_finish = _start + n;
		}
		return *this;
	}
	Vector<T>& operator=(Vector<T> v)
	{
		Swap(v);
		return *this;
	}
	void Swap(Vector<T>& v)
	{
		swap(_start, v._start);
		swap(_finish, v._finish);
		swap(_endOfStorage, v._endOfStorage);
	}
	Vector(const Vector<T>& v)
	
		:_start(nullptr)
		, _finish(nullptr)
		, _endOfStorage(nullptr)
	{
		size_t n = v.capacity();
		_start = new T[n];
		for (size_t i = 0; i < v.size(); ++i)
		{
			_start[i] = v[i];
		}
		_finish = _start + v.size();
		_endOfStorage = _start + n;
	}
	
};
struct A
{ 
	int a;
	char b;
};
template <class T>
ostream& operator<<(ostream& out, const Vector<T>& v)
{

	
	for (size_t i = 0; i < v.size(); ++i)
	{
		out << v[i] << " ";	 
	}
	return out;
}
void test()
{
	Vector<int> v1;
	Vector<int*> v2;
	Vector<A> v3;

	cout << v1.size() << endl;
	cout << v2.size() << endl;
	cout << v3.size() << endl;

}

int main()
{
	test();
	return 0;
}
Node(const Node& node)
{
	num++;
	this->a = node.a;
	cout << this << " " << "拷贝构造函数 " << a << endl;
}
