//开散列

#include<iostream>
#include<vector>
using namespace std;

//单链表节点
template<class V>
struct Node {
	V _val;
	Node<V>* _next;

	Node(const V& val)
		:_val(val)
		, _next(nullptr) {
	}
};

template<class K, class V, class KeyOfValue>
class HTable;

template<class K, class V, class KeyOfValue>
struct HashIterator {
	typedef HashIterator<V> Self;
	typedef HashTable<K, V, KeyOfValue> HT;
		//成员：节点指针,哈希表指针
		struct HashIterator<V> Node;
		HT* _hPtr;
		
		Node* _node;

	HashIterator(Node* node,HT* hPtr)
		:_node(node) 
	,_hPtr(hptr){
	}
	V& operator*() {
		return _node->_val;
	}
	V* operator->() {
		return &_node->_val;
	}
	bool operator!=(const Self& it) {
		return _node != it._node;
	}
	Self& operator++() {
		if (_node->_next) {
			_node = _node->_next;
		}
		else {
			//查找下一个非空链表的头节点
			//计算当前节点在哈希表的位置

			KeyOfValue kov;
			int idx = kov(_node->_val) % _hPtr->_ht.size();
			//从下一个哈希位置开始查找
			++idx;
			for (; idx < _hPtr->_ht.size(); ++idx) {
				if (_hPtr->_ht[idx]) {
					//找到节点
					_node = _hPtr->_ht[idx];
					break;
				}
			}
			//无有效节点
			if (idx == _hPtr->_ht.size()) {
				_node = nullptr;
			}
		}
		return *this;
	}
	//Self& operator++() {
	//	if (_node->_next) {
	//		_node = _node->_next;
	//	}
	//	else {
	//		KeyOfValue kov;
	//		int idx = kov(_node->_val) % hPtr->_ht.size();
	//		++idx;
	//		for (; idx < _hPtr->_ht.size(); ++idx) {
	//			if (_hPtr->_ht[idx]) {
	//				_node = _hPtr->_ht[idx];
	//				break;
	//			}
	//		}
	//		if (idx == _hPtr->_ht.size())
	//			_node = nullptr;
	//	}
	//}
};

template<class K,class V,class KeyOfValue>
class HTable {
public:
	typedef HashNode<V> Node;
	typedef HashNode<K, V, KetOfValue> iterator;

	friend struct HashIterator;
	HTable(int n = 10)
	:_ht(n)
		,_size(0)
		{
	}

	iterator begin() {
		//第一个非空链表的头节点

		for (size_t i = 0; idx < _hPtr->_ht.size() {
			if (_ht[idx) {
				return iterator(_ht[idx], this);
			}
			}
			return iterator(nullptr);
	}
	iterator end() {
		return iterator(nullptr,this);
	}
	bool insert(const V& val) {
		//0.检查容量
		checkCapacity();
		//1.计算hash位置
		KeyOfValue kov;
		int idx = kov(val) % _ht.size();
		//2.查找
		Node* cur = _ht[idx];
		while (cur) {
			if ((kov(cur->val)) == kov(val)) {
			//key重复
				
				return false;
			}
			cur = cur->_next;
		}
	}
	void checkCapacity() {
		if (_size == _ht.size()) {
			int newC = _size == 0 ? 10 : 2 * _size;

			//创建新的指针数组对象
			vector<Node*> newHt(newC);
			KeyOfValue kov;
			//遍历旧表
			for (int i = 0; i < _ht.size(); ++i) {
				Node* cur = _ht[i];
				//遍历单链表
				while (cur) {
					Node* next = cur->_next;;
					//计算新位置
					int idx = kov(cur->_val) % newHt.size();
					//头插
					cur->_next = newHt[idx];
					newHt[idx] = cur;
					cur = next;
				}
				//旧表指针置空
				_ht[i] = nullptr;
			}
			//新旧表交换
			swap(_ht, newHt);
		}
	}
private:
	//指针数组
	vector<Node*> _ht;
	int _size;
};
template<class K>
class Set {
public:
	typedef typename HTable<K, K, SetKeyOfValue>::iterator iterator;
	iterator begin() {
		return _ht.begin();
	}
	iterator end() {
		return _ht.end();
	}
	bool insert(const K& key) {
		_ht.insert(key);
	}
private:
	HashTable<K，K, SetKeyOfValue> _ht;
};
void test() {

}
int mian() {
	test();
	return 0;
}
